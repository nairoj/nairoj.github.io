<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nairoj 的个人博客</title>
  <subtitle>php|ubuntu|算法 学习者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.nairoj.top/"/>
  <updated>2016-10-15T15:52:57.517Z</updated>
  <id>http://www.nairoj.top/</id>
  
  <author>
    <name>NairoJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh</title>
    <link href="http://www.nairoj.top/2016/10/15/ssh/"/>
    <id>http://www.nairoj.top/2016/10/15/ssh/</id>
    <published>2016-10-15T15:47:02.000Z</published>
    <updated>2016-10-15T15:52:57.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu下远程登录linux计算机"><a href="#ubuntu下远程登录linux计算机" class="headerlink" title="ubuntu下远程登录linux计算机"></a>ubuntu下远程登录linux计算机</h1><p>本文主要将讲通过ssh实现远程登录linux计算机,并且可以执行命令</p>
<pre><code>ssh是一种安全协议，主要对其的使用一般在远程登录(如A电脑通过命令行远程操作B电脑)和为其他网络服务提供安全协议(常见的如sftp)
</code></pre><p>&lt;—more—&gt; </p>
<h2 id="两台机器通过ssh建立链接的大概流程："><a href="#两台机器通过ssh建立链接的大概流程：" class="headerlink" title="两台机器通过ssh建立链接的大概流程："></a>两台机器通过ssh建立链接的大概流程：</h2><ul>
<li>首先，ssh由客户端和服务器端组成，若电脑A想要通过ssh远程控制电脑B，A则为<strong>客户端</strong>，B则为<strong>服务端</strong>；</li>
<li>接下来，A通过客户端进程向B机器发送链接请求，B机器的服务端进程接收到请求，进行<strong>验证</strong>等其他操作与A建立链接</li>
<li>至此，电脑A能够远程操作电脑B</li>
</ul>
<h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="安装客户端程序"><a href="#安装客户端程序" class="headerlink" title="安装客户端程序"></a>安装客户端程序</h3><pre><code>ubuntu系统自带有ssh-client，使用ssh命令即可发起连接请求
</code></pre><h3 id="安装服务端程序"><a href="#安装服务端程序" class="headerlink" title="安装服务端程序"></a>安装服务端程序</h3><p>在被登录的linux电脑上执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update                         //更新一下apt</div><div class="line">$ sudo apt-get install openssh-server         //安装ssh服务器程序</div></pre></td></tr></table></figure></p>
<p>安装完成后，可以尝试登录本机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ shh localhost</div></pre></td></tr></table></figure></p>
<p>首次登录会有个询问,输入yes，回车<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="询问"></p>
<p>这时候会提示输入密码，输入当前用户的登陆密码，回车，登录成功<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="登录到本机"><br>输入exit退出登录</p>
<p>此时ssh程序的安装就完事了</p>
<h3 id="开始远程登录"><a href="#开始远程登录" class="headerlink" title="开始远程登录"></a>开始远程登录</h3><p>执行<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="未带参数ssh"><br>此时，ssh 会尝试用当前用户作为用户名来登录服务端电脑，即上图中尝试使用nairoj这个用户名登录目标电脑，如果目标电脑没有nairoj这个用户呢？</p>
<p>使用-l参数指定要登录的用户，指定用root账户登录:<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="指定用户名"></p>
<p>接下来输入密码，登录成功！<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="root登录成功"></p>
<p>上图最后一行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@iZm5ec880z2roqeog3q978Z:~<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>说明此时命令行已经相当于目标机的命令行了，<br>在这上面执行的命令即为在目标机上执行～</p>
<h2 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h2><p>ssh提供了两种验证方式</p>
<ul>
<li>密码验证</li>
<li>密钥验证</li>
</ul>
<p>上面登录的方式就是<strong>密码验证</strong>，只要知道目标机的用户密码就可以登录，这种验证方式的有一个缺点，不能保证客户机连接上的就是目标机，可能存在有‘<a href="http://www.2cto.com/Article/201212/175569.html" target="_blank" rel="external">中间人</a>’, 还有就是每次登录都需要输入密码。</p>
<p>再说一下<strong>密钥验证</strong>的登录方式：<br>1.先<code>exit</code>退出刚刚的远程登录状态，回到本机<br>2.客户机采用<strong>非对称加密算法rsa</strong>建立<strong>一对密钥</strong>（一个公钥，一个私钥)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh/                  <span class="comment">#~表示用户目录,即‘/usr/你的用户名/’</span></div><div class="line">$ ssh-keygen -t rsa <span class="comment">#用rsa算法建立一对密钥，中间的提示一直按回车即可</span></div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>若不存在.ssh文件夹，先执行一次<code>ssh localhost</code></li>
<li>非对称加密算法生成的密钥，公钥加密的文件只有密钥能解密，私钥加密的文件只有公钥能解密</li>
<li>上面的命令执行完，在.ssh文件下有多出两个文件<code>id_rsa</code>和<code>id_rsa.pub</code>，<code>.pub</code>后缀的文件即为公钥</li>
</ul>
<p>3.将公钥上传到服务端的（这里将公钥上传到用户目录下），<br>这里会要求输入目标机用户的登陆密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将user替换成要登录的用户名，ip替换成服务机的ip地址</span></div><div class="line">$ scp ~/.ssh/id_rsa.pub user@ip:/home/user/</div></pre></td></tr></table></figure></p>
<p>出现下图即为传输成功，<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="公钥传输完毕"><br>此时在服务端机器的用户目录下，可以找到这个文件</p>
<ol>
<li>用密码登录的方式远程登录服务端，将公钥加入授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ssh <span class="_">-l</span> user ip     <span class="comment"># 登录，这里会要求输入密码</span></div><div class="line">$ mkdir ~/.ssh       <span class="comment"># 如果不存在该文件夹需先创建，若已存在则忽略</span></div><div class="line">$ cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys  </div><div class="line"><span class="comment">#将用户目录下的客户机公钥加入授权</span></div><div class="line">$ <span class="built_in">exit</span>               <span class="comment">#退出登录，回到本机</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>5.此时已经可以使用密钥验证的方式登录服务端电脑了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh <span class="_">-l</span> user ip</div></pre></td></tr></table></figure></p>
<p>这一次不会要求输入密码，直接登录成功</p>
<pre><code>这种验证方式的原理在于：将客户机A的公钥存入服务机，当客户机A发起ssh登录的请求时，服务机生成一个随机数X，用A的公钥加密随机数X后发给A，
A用自己的密钥解密发来的数据后，将解密得到的随机数发回给服务机
如果发回的随机数与X相同，则验证成功，实现远程登录且不用人工输入密码
</code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>因为每次登录都输入ip很麻烦，可以将经常登录的ip写到<code>/ect/hosts</code>文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gedit /ect/hosts</div></pre></td></tr></table></figure></p>
<p>在其中写入自己常用的ip和并且给它取个名字，保存<br><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="shhip"><br>上图的144.111.111.56 即为常用的ip，myesc 是给它取得别名<br>以后进行远程登陆时,执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> <span class="_">-l</span> user myesc</div></pre></td></tr></table></figure></p>
<p>就可以进行远程登录</p>
<blockquote>
<p>参考资料</p>
</blockquote>
<ul>
<li><a href="http://www.powerxing.com/install-hadoop/" target="_blank" rel="external">http://www.powerxing.com/install-hadoop/</a></li>
<li><a href="http://www.linuxidc.com/Linux/2012-12/76277.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2012-12/76277.htm</a></li>
<li><a href="http://baike.baidu.com/link?url=20nZ-d-z36mEtUAFrc6ddHReyKm7E9Aw88BVrY69rTkFXugQ1NOFcnImzHMIDNXZYWUnOQiLrNh7QrxtN6iu1_" target="_blank" rel="external">http://baike.baidu.com/link?url=20nZ-d-z36mEtUAFrc6ddHReyKm7E9Aw88BVrY69rTkFXugQ1NOFcnImzHMIDNXZYWUnOQiLrNh7QrxtN6iu1_</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ubuntu下远程登录linux计算机&quot;&gt;&lt;a href=&quot;#ubuntu下远程登录linux计算机&quot; class=&quot;headerlink&quot; title=&quot;ubuntu下远程登录linux计算机&quot;&gt;&lt;/a&gt;ubuntu下远程登录linux计算机&lt;/h1&gt;&lt;p&gt;本文
    
    </summary>
    
    
  </entry>
  
</feed>
